name: üéÆ PSVita Template Build
on: [push, pull_request]

env:
  GODOT_BASE_BRANCH: 3.x
  VITASDK: /usr/local/vitasdk
  VITASDK_VERSION: "vitasdk-x86_64-linux-gnu-2025-03-11_15-12-52"
  VITA_PACKAGES_EXTRA_COMMIT: d5b66fa7271abac9689541a59110adc17d06a616
  EUID: 1

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-vita
  cancel-in-progress: true

jobs:
  vita-template:
    runs-on: "ubuntu-24.04"
    name: Vita Release Build

    steps:
      - uses: actions/checkout@v4

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: vita-template
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libarchive-tools fakeroot zip wget libelf-dev build-essential

      - name: Setup VitaSDK with Exact Working Version
        run: |
          echo "=== Installing VitaSDK Version: $VITASDK_VERSION ==="
          wget -q "https://github.com/vitasdk/autobuilds/releases/download/master-linux-v2.529/${VITASDK_VERSION}.tar.bz2"
          sudo tar -xf "${VITASDK_VERSION}.tar.bz2" -C /usr/local/
          
          export VITASDK=/usr/local/vitasdk
          export PATH=$VITASDK/bin:$PATH
          echo "VITASDK=/usr/local/vitasdk" >> $GITHUB_ENV
          echo "/usr/local/vitasdk/bin" >> $GITHUB_PATH
          
          echo "=== GCC Version ==="
          arm-vita-eabi-gcc --version
          
          echo "=== Installing vdpm and vita-rss-libdl ==="
          git clone https://github.com/vitasdk/vdpm
          cd vdpm
          ./install-all.sh
          vdpm vita-rss-libdl
          cd ..
          
          echo "=== Installing Pinned vita-packages-extra ==="
          git clone https://github.com/isage/vita-packages-extra
          cd vita-packages-extra
          git checkout $VITA_PACKAGES_EXTRA_COMMIT
          cd pvr_psp2
          vita-makepkg
          ../../vdpm/vdpm *-arm.tar.xz
          cd ../../../
          echo "‚úÖ VitaSDK setup complete"

      - name: Compilation with Fixed VitaSDK Library Order
        id: compilation
        run: |
          export VITASDK=/usr/local/vitasdk
          export PATH=$VITASDK/bin:$PATH
          export CC="arm-vita-eabi-gcc"
          export CXX="arm-vita-eabi-g++"
          export AR="arm-vita-eabi-ar"
          export RANLIB="arm-vita-eabi-ranlib"
          export STRIP="arm-vita-eabi-strip"
          export SCONS_CACHE_DIR="$GITHUB_WORKSPACE/.scons-cache"
          
          BUILD_SUCCESS=false
          BUILD_EXIT_CODE=0
          
          echo "üî® Starting SCons build with VitaSDK library fixes..."
          
          # Build with proper VitaSDK library linking order and pthread support
          if scons platform=vita \
                target=release \
                tools=false \
                verbose=no \
                warnings=no \
                werror=no \
                debug_symbols=no \
                use_rtti=True \
                disable_gles3=True \
                cache_dir="$SCONS_CACHE_DIR" \
                CXXFLAGS="-fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables -fno-pic -fno-pie -mno-thumb-interwork -mno-unaligned-access -Wno-psabi" \
                CCFLAGS="-fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables -fno-pic -fno-pie -mno-thumb-interwork -mno-unaligned-access -Wno-psabi" \
                LINKFLAGS="-Wl,--start-group -lpthread -lstdc++ -lm -lc -lgcc -lSceLibKernel_stub -lSceDisplay_stub -lSceCtrl_stub -lSceAudio_stub -lSceCommonDialog_stub -lSceNet_stub -lSceNetCtl_stub -lSceHttp_stub -lSceShellSvc_stub -lSceSysmodule_stub -lScePvf_stub -lSceMotion_stub -lSceFios2_stub -lSceAppUtil_stub -lSceTouch_stub -lSceAppMgr_stub -lSceGxm_stub -Wl,--end-group -Wl,--gc-sections -no-pie"; then
            BUILD_SUCCESS=true
            BUILD_EXIT_CODE=0
            echo "‚úÖ Build completed successfully!"
          else
            BUILD_SUCCESS=false
            BUILD_EXIT_CODE=$?
            echo "‚ö†Ô∏è Build failed with exit code: $BUILD_EXIT_CODE, but preserving cache"
          fi
          
          # Check build artifacts
          echo "=== Build Artifacts Check ==="
          if [[ -f "temp-build/godot.vita.opt.32" ]]; then
            echo "‚úÖ Executable created: temp-build/godot.vita.opt.32"
            ls -la temp-build/godot.vita.opt.32
          else
            echo "‚ùå No executable found"
            ls -la temp-build/ 2>/dev/null || echo "No temp-build directory"
          fi
          
          # Save build results
          echo "BUILD_SUCCESS=$BUILD_SUCCESS" >> $GITHUB_OUTPUT
          echo "BUILD_EXIT_CODE=$BUILD_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Always exit 0 to preserve cache
          exit 0

      - name: VELF & EBOOT.BIN Creation and Template Packaging
        run: |
          set -e
          export VITASDK=/usr/local/vitasdk
          export PATH=$VITASDK/bin:$PATH

          if [[ -f "temp-build/godot.vita.opt.32" ]]; then
            echo "‚úÖ Executable found: temp-build/godot.vita.opt.32"

            # VELF creation
            cp temp-build/godot.vita.opt.32 temp-build/vita_release_stripped
            arm-vita-eabi-strip -g temp-build/vita_release_stripped
            vita-elf-create temp-build/vita_release_stripped temp-build/vita_release.velf

            # EBOOT.BIN creation
            vita-make-fself temp-build/vita_release.velf temp-build/eboot.bin

            # Prepare PSVita template structure
            mkdir -p template_build/vita_release/sce_sys
            mkdir -p template_build/vita_release/module

            # Copy EBOOT.BIN
            cp temp-build/eboot.bin template_build/vita_release/

            # Copy/Generate param.sfo and icon0.png
            # Replace with real sources or generate as needed
            # For demonstration, touch empty files if not present
            if [[ -f "assets/param.sfo" ]]; then
              cp assets/param.sfo template_build/vita_release/sce_sys/param.sfo
            else
              echo "WARNING: param.sfo missing, generating dummy."
              echo "SFO" > template_build/vita_release/sce_sys/param.sfo
            fi
            if [[ -f "assets/icon0.png" ]]; then
              cp assets/icon0.png template_build/vita_release/sce_sys/icon0.png
            else
              echo "WARNING: icon0.png missing, generating dummy."
              touch template_build/vita_release/sce_sys/icon0.png
            fi

            # Copy all required suprx modules from vita-packages-extra/pvr_psp2/dist
            find vita-packages-extra/pvr_psp2/dist -type f -name "*.suprx" -exec cp {} template_build/vita_release/module/ \;
            # You can also copy additional modules as needed

            # Zip vita_release
            cd template_build
            zip -r vita_release.zip vita_release
            cd ..
            # Create final template zip for Godot export template usage
            zip -r vita-template.zip template_build/vita_release.zip

            echo "‚úÖ PSVita template packaging complete"
          else
            echo "‚ùå No executable found, cannot package PSVita template."
            exit 1
          fi

      - name: Save Godot build cache (Always Runs)
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: vita-template
        continue-on-error: true

      - name: Upload PSVita template artifact
        uses: actions/upload-artifact@v4
        with:
          name: vita-template
          path: vita-template.zip

      - name: Debug Build Information
        if: always()
        run: |
          echo "=== Build Summary ==="
          arm-vita-eabi-gcc --version || echo "GCC version unknown"
          if [[ -f "temp-build/eboot.bin" ]]; then
            file temp-build/eboot.bin
            du -h temp-build/eboot.bin
          if [[ -f "vita-template.zip" ]]; then
            unzip -l vita-template.zip
          fi
          else
            echo "No eboot.bin produced. Build failure."
