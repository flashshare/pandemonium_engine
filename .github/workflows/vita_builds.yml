name: üéÆ PSVita Builds
on: [push, pull_request]

# Global Settings
env:
  GODOT_BASE_BRANCH: 3.x
  SCONSFLAGS: verbose=no warnings=no werror=no debug_symbols=no use_rtti=True disable_gles3=True
  VITASDK: /usr/local/vitasdk
  # Pin to working versions from your successful build period
  VITASDK_VERSION: "vitasdk-x86_64-linux-gnu-2025-03-11_15-12-52"
  VITA_PACKAGES_EXTRA_COMMIT: d96ca70a3afa0eff6009ec7500afc7f3068933c1
  # Pin to compatible vita-toolchain commit that supports older relocations
  VITA_TOOLCHAIN_COMMIT: "4545e75e68a56e0cdcd35e8cd9fb2cefd1ec4f05"
  EUID: 1

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-vita
  cancel-in-progress: true

jobs:
  vita-template:
    runs-on: "ubuntu-24.04"
    name: Template (target=release, tools=no)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      - name: Setup VitaSDK with Compatible Toolchain
        run: |
          sudo apt-get update
          sudo apt-get install cmake libarchive-tools fakeroot zip wget build-essential -y
          
          echo "=== Installing VitaSDK version: $VITASDK_VERSION ==="
          wget -q "https://github.com/vitasdk/autobuilds/releases/download/master-linux-v2.529/${VITASDK_VERSION}.tar.bz2"
          sudo tar -xf "${VITASDK_VERSION}.tar.bz2" -C /usr/local/
          
          # Set up environment
          export VITASDK=/usr/local/vitasdk
          export PATH=$VITASDK/bin:$PATH
          echo "VITASDK=/usr/local/vitasdk" >> $GITHUB_ENV
          echo "/usr/local/vitasdk/bin" >> $GITHUB_PATH
          
          echo "=== Installing Compatible vita-toolchain (Relocation Fix) ==="
          git clone https://github.com/vitasdk/vita-toolchain.git
          cd vita-toolchain
          git checkout $VITA_TOOLCHAIN_COMMIT
          echo "Using vita-toolchain commit: $(git rev-parse HEAD)"
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/vitasdk
          make -j$(nproc) vita-elf-create
          sudo make install
          cd ../..
          
          # Verify the fixed vita-elf-create is installed
          echo "=== Toolchain Verification ==="
          which vita-elf-create
          vita-elf-create --version || echo "vita-elf-create installed"
          arm-vita-eabi-gcc --version | head -1
          
          echo "=== Installing VitaSDK Dependencies ==="
          git clone https://github.com/vitasdk/vdpm
          cd vdpm
          ./install-all.sh
          vdpm vita-rss-libdl
          cd ..
          
          echo "=== Installing Pinned vita-packages-extra ==="
          git clone https://github.com/isage/vita-packages-extra
          cd vita-packages-extra
          git checkout $VITA_PACKAGES_EXTRA_COMMIT
          cd pvr_psp2
          vita-makepkg
          vdpm *-arm.tar.xz
          
          echo "‚úÖ VitaSDK setup complete with relocation type 25 fix"

      - name: Compilation (Fail-Safe)
        id: compilation
        run: |
          echo "=== Starting Godot Build ==="
          
          # Track build success for cache preservation
          BUILD_SUCCESS=false
          
          # Use the Godot build action logic but capture results
          if scons platform=vita \
                target=release \
                tools=false \
                verbose=no \
                warnings=no \
                werror=no \
                debug_symbols=no \
                use_rtti=True \
                disable_gles3=True; then
            BUILD_SUCCESS=true
            echo "‚úÖ Build completed successfully!"
          else
            BUILD_SUCCESS=false
            echo "‚ö†Ô∏è Build failed, but preserving cache"
          fi
          
          # Save build result
          echo "BUILD_SUCCESS=$BUILD_SUCCESS" >> $GITHUB_OUTPUT
          
          # Always exit 0 to preserve cache
          exit 0

      - name: Manual VELF Creation (Fallback)
        if: steps.compilation.outputs.BUILD_SUCCESS == 'false'
        run: |
          echo "=== Attempting Manual VELF Creation ==="
          export VITASDK=/usr/local/vitasdk
          export PATH=$VITASDK/bin:$PATH
          
          if [[ -f "temp-build/godot.vita.opt.32" ]]; then
            echo "Found executable, attempting VELF conversion..."
            cd temp-build
            
            # Method 1: Try with minimal stripping
            echo "Method 1: Minimal stripping approach"
            cp godot.vita.opt.32 vita_release_minimal
            if vita-elf-create vita_release_minimal vita_release.velf; then
              echo "‚úÖ Method 1 successful!"
              ls -la vita_release.velf
              exit 0
            fi
            
            # Method 2: Strip debug symbols only
            echo "Method 2: Debug symbols stripping"
            cp godot.vita.opt.32 vita_release_debug_stripped
            arm-vita-eabi-strip -g vita_release_debug_stripped
            if vita-elf-create vita_release_debug_stripped vita_release.velf; then
              echo "‚úÖ Method 2 successful!"
              ls -la vita_release.velf
              exit 0
            fi
            
            # Method 3: Full stripping
            echo "Method 3: Full stripping approach"
            cp godot.vita.opt.32 vita_release_full_stripped
            arm-vita-eabi-strip --strip-all vita_release_full_stripped
            if vita-elf-create vita_release_full_stripped vita_release.velf; then
              echo "‚úÖ Method 3 successful!"
              ls -la vita_release.velf
              exit 0
            fi
            
            echo "‚ùå All manual VELF creation methods failed"
            echo "Available files:"
            ls -la temp-build/
          else
            echo "‚ùå No executable found for VELF conversion"
          fi

      - name: Save Godot build cache (Always Runs)
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: vita-template
        continue-on-error: true

      - name: Build Status Summary
        run: |
          echo "=== Build Status Summary ==="
          if [[ -f "temp-build/vita_release.velf" ]]; then
            echo "‚úÖ SUCCESS: VELF file created"
            echo "üìÅ File: temp-build/vita_release.velf"
            ls -la temp-build/vita_release*
            file temp-build/vita_release.velf
            echo "BUILD_STATUS=success" >> $GITHUB_ENV
          elif [[ -f "temp-build/godot.vita.opt.32" ]]; then
            echo "‚ö†Ô∏è PARTIAL: Executable created but VELF conversion failed"
            echo "üìÅ File: temp-build/godot.vita.opt.32"
            ls -la temp-build/godot.vita.opt.32
            echo "BUILD_STATUS=partial" >> $GITHUB_ENV
          else
            echo "‚ùå FAILED: No executable created"
            echo "BUILD_STATUS=failed" >> $GITHUB_ENV
          fi

      - name: Upload artifact (Success)
        if: env.BUILD_STATUS == 'success'
        uses: ./.github/actions/upload-artifact
        with:
          name: godot-vita-release-${{ github.sha }}-complete
          path: |
            temp-build/vita_release.velf
            temp-build/godot.vita.opt.32
            temp-build/vita_release/

      - name: Upload partial artifact (Partial Success)
        if: env.BUILD_STATUS == 'partial'
        uses: ./.github/actions/upload-artifact
        with:
          name: godot-vita-executable-${{ github.sha }}-no-velf
          path: |
            temp-build/godot.vita.opt.32
            temp-build/

      - name: Verify Build Success (Final)
        run: |
          echo "=== Final Verification ==="
          case "$BUILD_STATUS" in
            "success")
              echo "üéâ Complete Success: PS Vita template fully built!"
              echo "‚úÖ VELF file: temp-build/vita_release.velf"
              exit 0
              ;;
            "partial")  
              echo "‚ö†Ô∏è Partial Success: Executable built but VELF conversion failed"
              echo "üí° Next run will use cache and focus on VELF conversion"
              exit 1
              ;;
            "failed")
              echo "‚ùå Build Failed: No executable created"
              echo "üíæ Cache preserved for next attempt"
              exit 1
              ;;
            *)
              echo "‚ö†Ô∏è Unknown build status"
              exit 1
              ;;
          esac
