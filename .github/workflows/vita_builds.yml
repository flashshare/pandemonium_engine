name: 🎮 PSVita Builds
on: [push, pull_request]

env:
  GODOT_BASE_BRANCH: 3.x
  VITASDK: /usr/local/vitasdk
  VITASDK_VERSION: "vitasdk-x86_64-linux-gnu-2025-03-11_15-12-52"
  VITA_PACKAGES_EXTRA_COMMIT: d5b66fa7271abac9689541a59110adc17d06a616
  EUID: 1

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-vita
  cancel-in-progress: true

jobs:
  vita-template:
    runs-on: "ubuntu-24.04"
    name: Vita Release Build

    steps:
      - uses: actions/checkout@v4

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: vita-template
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libarchive-tools fakeroot zip wget libelf-dev build-essential

      - name: Setup VitaSDK with Exact Working Version
        run: |
          echo "=== Installing VitaSDK Version: $VITASDK_VERSION ==="
          wget -q "https://github.com/vitasdk/autobuilds/releases/download/master-linux-v2.529/${VITASDK_VERSION}.tar.bz2"
          sudo tar -xf "${VITASDK_VERSION}.tar.bz2" -C /usr/local/
          
          export VITASDK=/usr/local/vitasdk
          export PATH=$VITASDK/bin:$PATH
          echo "VITASDK=/usr/local/vitasdk" >> $GITHUB_ENV
          echo "/usr/local/vitasdk/bin" >> $GITHUB_PATH
          
          echo "=== GCC Version ==="
          arm-vita-eabi-gcc --version
          
          echo "=== Installing vdpm and vita-rss-libdl ==="
          git clone https://github.com/vitasdk/vdpm
          cd vdpm
          ./install-all.sh
          vdpm vita-rss-libdl
          cd ..
          
          echo "=== Installing Pinned vita-packages-extra ==="
          git clone https://github.com/isage/vita-packages-extra
          cd vita-packages-extra
          git checkout $VITA_PACKAGES_EXTRA_COMMIT
          cd pvr_psp2
          vita-makepkg
          vdpm *-arm.tar.xz
          echo "✅ VitaSDK setup complete"

      - name: Compilation with Fixed VitaSDK Library Order
        id: compilation
        run: |
          export VITASDK=/usr/local/vitasdk
          export PATH=$VITASDK/bin:$PATH
          export CC="arm-vita-eabi-gcc"
          export CXX="arm-vita-eabi-g++"
          export AR="arm-vita-eabi-ar"
          export RANLIB="arm-vita-eabi-ranlib"
          export STRIP="arm-vita-eabi-strip"
          export SCONS_CACHE_DIR="$GITHUB_WORKSPACE/.scons-cache"
          
          BUILD_SUCCESS=false
          BUILD_EXIT_CODE=0
          
          echo "🔨 Starting SCons build with VitaSDK library fixes..."
          
          # Build with proper VitaSDK library linking order and pthread support
          if scons platform=vita \
                target=release \
                tools=false \
                verbose=no \
                warnings=no \
                werror=no \
                debug_symbols=no \
                use_rtti=True \
                disable_gles3=True \
                cache_dir="$SCONS_CACHE_DIR" \
                CXXFLAGS="-fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables -fno-pic -fno-pie -mno-thumb-interwork -mno-unaligned-access -Wno-psabi" \
                CCFLAGS="-fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables -fno-pic -fno-pie -mno-thumb-interwork -mno-unaligned-access -Wno-psabi" \
                LINKFLAGS="-Wl,--start-group -lpthread -lstdc++ -lm -lc -lgcc -lSceLibKernel_stub -lSceDisplay_stub -lSceCtrl_stub -lSceAudio_stub -lSceCommonDialog_stub -lSceNet_stub -lSceNetCtl_stub -lSceHttp_stub -lSceShellSvc_stub -lSceSysmodule_stub -lScePvf_stub -lSceMotion_stub -lSceFios2_stub -lSceAppUtil_stub -lSceTouch_stub -lSceAppMgr_stub -lSceGxm_stub -Wl,--end-group -Wl,--gc-sections -no-pie"; then
            BUILD_SUCCESS=true
            BUILD_EXIT_CODE=0
            echo "✅ Build completed successfully!"
          else
            BUILD_SUCCESS=false
            BUILD_EXIT_CODE=$?
            echo "⚠️ Build failed with exit code: $BUILD_EXIT_CODE, but preserving cache"
          fi
          
          # Check build artifacts
          echo "=== Build Artifacts Check ==="
          if [[ -f "temp-build/godot.vita.opt.32" ]]; then
            echo "✅ Executable created: temp-build/godot.vita.opt.32"
            ls -la temp-build/godot.vita.opt.32
          else
            echo "❌ No executable found"
            ls -la temp-build/ 2>/dev/null || echo "No temp-build directory"
          fi
          
          # Save build results
          echo "BUILD_SUCCESS=$BUILD_SUCCESS" >> $GITHUB_OUTPUT
          echo "BUILD_EXIT_CODE=$BUILD_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Always exit 0 to preserve cache
          exit 0

      - name: VELF Creation with Multiple Strategies
        run: |
          echo "=== VELF Creation Process ==="
          export VITASDK=/usr/local/vitasdk
          export PATH=$VITASDK/bin:$PATH
          
          if [[ -f "temp-build/godot.vita.opt.32" ]]; then
            echo "✅ Executable found: $(du -h temp-build/godot.vita.opt.32 | cut -f1)"
            cd temp-build
            
            # Strategy 1: Standard VELF creation process (matches your original workflow)
            echo "🔧 Strategy 1: Standard VitaSDK VELF creation"
            cp godot.vita.opt.32 vita_release_stripped
            if arm-vita-eabi-strip -g vita_release_stripped && \
               vita-elf-create vita_release_stripped vita_release.velf; then
              echo "✅ SUCCESS: Standard VELF creation worked!"
              ls -la vita_release.velf
              file vita_release.velf 2>/dev/null || echo "VELF file created"
              exit 0
            else
              echo "❌ Standard VELF creation failed, trying alternatives..."
            fi
            
            # Strategy 2: No stripping
            echo "🔧 Strategy 2: VELF creation without stripping"
            if vita-elf-create godot.vita.opt.32 vita_release_nostrip.velf; then
              echo "✅ SUCCESS: No-strip VELF creation worked!"
              mv vita_release_nostrip.velf vita_release.velf
              ls -la vita_release.velf
              exit 0
            fi
            
            # Strategy 3: Full stripping
            echo "🔧 Strategy 3: VELF creation with full stripping"
            cp godot.vita.opt.32 vita_release_fullstrip
            if arm-vita-eabi-strip --strip-all vita_release_fullstrip && \
               vita-elf-create vita_release_fullstrip vita_release.velf; then
              echo "✅ SUCCESS: Full-strip VELF creation worked!"
              ls -la vita_release.velf
              exit 0
            fi
            
            # Strategy 4: objcopy preprocessing
            echo "🔧 Strategy 4: objcopy preprocessing approach"
            if arm-vita-eabi-objcopy --strip-unneeded godot.vita.opt.32 vita_release_objcopy && \
               vita-elf-create vita_release_objcopy vita_release.velf; then
              echo "✅ SUCCESS: objcopy approach worked!"
              ls -la vita_release.velf
              exit 0
            fi
            
            echo "❌ All VELF creation strategies failed"
            echo "📦 Available files for manual processing:"
            ls -la vita_* godot.vita.opt.32 2>/dev/null
            
          else
            echo "❌ No executable found for VELF conversion"
          fi

      - name: Save Godot build cache (Always Runs)
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: vita-template
        continue-on-error: true

      - name: Build Status Assessment
        run: |
          echo "=== Final Build Assessment ==="
          
          if [[ -f "temp-build/vita_release.velf" ]]; then
            echo "🎉 COMPLETE SUCCESS: VELF file created!"
            echo "📁 File: temp-build/vita_release.velf"
            ls -la temp-build/vita_release.velf
            file temp-build/vita_release.velf 2>/dev/null || echo "VELF ready for PS Vita"
            echo "BUILD_RESULT=complete" >> $GITHUB_ENV
            
          elif [[ -f "temp-build/godot.vita.opt.32" ]]; then
            echo "⚠️ PARTIAL SUCCESS: Executable created, VELF conversion failed"
            echo "📁 File: temp-build/godot.vita.opt.32"
            ls -la temp-build/godot.vita.opt.32
            echo "💡 Manual VELF conversion may be possible"
            echo "BUILD_RESULT=partial" >> $GITHUB_ENV
            
          else
            echo "❌ BUILD FAILED: No executable created"
            echo "🔧 Check library linking configuration above"
            echo "BUILD_RESULT=failed" >> $GITHUB_ENV
          fi

      - name: Upload Complete Artifact (VELF Success)
        if: env.BUILD_RESULT == 'complete'
        uses: ./.github/actions/upload-artifact
        with:
          name: godot-vita-complete-${{ github.sha }}
          path: |
            temp-build/vita_release.velf
            temp-build/godot.vita.opt.32
            temp-build/vita_release/

      - name: Upload Partial Artifact (Executable Only)
        if: env.BUILD_RESULT == 'partial'
        uses: ./.github/actions/upload-artifact
        with:
          name: godot-vita-executable-${{ github.sha }}
          path: |
            temp-build/godot.vita.opt.32
            temp-build/vita_*

      - name: Debug Build Information
        if: always()
        run: |
          echo "=== Build Summary ==="
          echo "Build Result: $BUILD_RESULT"
          echo "Compilation Success: ${{ steps.compilation.outputs.BUILD_SUCCESS }}"
          echo "Build Exit Code: ${{ steps.compilation.outputs.BUILD_EXIT_CODE }}"
          echo "VitaSDK Version: $VITASDK_VERSION"
          echo "vita-packages-extra commit: $VITA_PACKAGES_EXTRA_COMMIT"
          
          case "$BUILD_RESULT" in
            "complete")
              echo "🎉 PS Vita Godot template build COMPLETED successfully!"
              echo "✅ Ready for PS Vita deployment via VitaShell"
              echo "🎯 Both linking and VELF creation succeeded"
              ;;
            "partial")
              echo "⚠️ Linking succeeded, VELF creation failed"
              echo "💡 Manual VELF creation may be possible with external tools"
              echo "🔧 Next iteration will use cached compilation (5-10 minutes)"
              ;;
            "failed")
              echo "❌ Build failed at linking stage"
              echo "🔧 Check VitaSDK library configuration and linking order"
              echo "💾 All compilation work preserved in cache"
              ;;
          esac
          
          # Cache effectiveness report
          if [ -d ".scons-cache" ]; then
            echo "📊 Cache Status: $(du -sh .scons-cache 2>/dev/null || echo 'Unknown size')"
          fi
