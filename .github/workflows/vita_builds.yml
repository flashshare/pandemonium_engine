name: 🎮 PSVita Builds
on: [push, pull_request]

# Global Settings
env:
  GODOT_BASE_BRANCH: 3.x
  SCONSFLAGS: verbose=no warnings=no werror=no debug_symbols=no use_rtti=True disable_gles3=True
  VITASDK: /usr/local/vitasdk
  # Pin to working versions from your successful build period
  VITASDK_VERSION: "vitasdk-x86_64-linux-gnu-2025-03-11_15-12-52"
  VITA_PACKAGES_EXTRA_COMMIT: d96ca70a3afa0eff6009ec7500afc7f3068933c1
  EUID: 1

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-vita
  cancel-in-progress: true

jobs:
  vita-template:
    runs-on: "ubuntu-24.04"
    name: Template (target=release, tools=no)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      - name: Setup VitaSDK (Pinned to Working Version)
        run: |
          sudo apt-get update
          sudo apt-get install cmake libarchive-tools fakeroot zip wget -y
          
          # Use the exact VitaSDK version that worked in your May 2025 build
          echo "Installing VitaSDK version: $VITASDK_VERSION"
          wget -q "https://github.com/vitasdk/autobuilds/releases/download/master-linux-v2.529/${VITASDK_VERSION}.tar.bz2"
          sudo tar -xf "${VITASDK_VERSION}.tar.bz2" -C /usr/local/
          
          # Set up environment
          export VITASDK=/usr/local/vitasdk
          export PATH=$VITASDK/bin:$PATH
          echo "VITASDK=/usr/local/vitasdk" >> $GITHUB_ENV
          echo "/usr/local/vitasdk/bin" >> $GITHUB_PATH
          
          # Install dependencies using your original approach but with pinned versions
          git clone https://github.com/vitasdk/vdpm
          cd vdpm
          ./install-all.sh
          vdpm vita-rss-libdl
          cd ..
          
          # Pin vita-packages-extra to your working commit
          git clone https://github.com/isage/vita-packages-extra
          cd vita-packages-extra
          git checkout $VITA_PACKAGES_EXTRA_COMMIT
          cd pvr_psp2
          vita-makepkg
          vdpm *-arm.tar.xz
          
          echo "✅ VitaSDK setup complete with pinned versions"

      - name: Cache Status Check
        run: |
          echo "=== Build Cache Status ==="
          if [ -d ".scons-cache" ]; then
            echo "📦 Cache directory exists: $(du -sh .scons-cache 2>/dev/null || echo 'Empty')"
            echo "🎯 Cached files: $(find .scons-cache -name "*.o" 2>/dev/null | wc -l) object files"
            echo "⚡ This will be an incremental build"
          else
            echo "🆕 No cache directory found - this will be a full build"
          fi

      - name: Compilation (Fail-Safe)
        id: compilation
        run: |
          echo "=== Starting Godot Build (Cache-Safe Mode) ==="
          
          # Set up VitaSDK environment
          export VITASDK=/usr/local/vitasdk
          export PATH=$VITASDK/bin:$PATH
          
          # Initialize build result tracking
          BUILD_SUCCESS=false
          BUILD_EXIT_CODE=0
          
          # Attempt build and capture result without failing the workflow step
          echo "🔨 Starting SCons build..."
          if scons platform=vita \
                target=release \
                tools=false \
                verbose=no \
                warnings=no \
                werror=no \
                debug_symbols=no \
                use_rtti=True \
                disable_gles3=True; then
            BUILD_SUCCESS=true
            BUILD_EXIT_CODE=0
            echo "✅ Build completed successfully!"
          else
            BUILD_SUCCESS=false
            BUILD_EXIT_CODE=$?
            echo "⚠️ Build failed with exit code: $BUILD_EXIT_CODE"
          fi
          
          # Check what was actually built
          echo "=== Build Artifacts Check ==="
          if [[ -f "temp-build/vita_release.velf" ]]; then
            echo "✅ VELF file successfully created"
            echo "📁 VELF location: temp-build/vita_release.velf"
            ls -la temp-build/vita_release* 2>/dev/null || true
          elif [[ -f "temp-build/godot.vita.opt.32" ]]; then
            echo "📦 Executable created but VELF conversion may have failed"
            echo "📁 ELF location: temp-build/godot.vita.opt.32"
            ls -la temp-build/godot.vita.opt.32
          else
            echo "⚠️ No final executable found, but compilation may be cached"
            echo "📂 Available temp-build contents:"
            ls -la temp-build/ 2>/dev/null || echo "No temp-build directory"
          fi
          
          # Check cache status after build
          echo "=== Post-Build Cache Status ==="
          if [ -d ".scons-cache" ]; then
            echo "📦 Cache size: $(du -sh .scons-cache 2>/dev/null || echo 'Empty')"
            echo "🎯 Total cached objects: $(find .scons-cache -name "*.o" 2>/dev/null | wc -l)"
          fi
          
          # Save build results for next steps
          echo "BUILD_SUCCESS=$BUILD_SUCCESS" >> $GITHUB_OUTPUT
          echo "BUILD_EXIT_CODE=$BUILD_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # CRITICAL: Don't exit with failure - let cache save happen
          echo "🔄 Workflow continues regardless of build result to preserve cache"
          exit 0

      - name: Save Godot build cache (Always Runs)
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Build Results Summary
        run: |
          echo "=== Final Build Summary ==="
          echo "Build Success: ${{ steps.compilation.outputs.BUILD_SUCCESS }}"
          echo "Build Exit Code: ${{ steps.compilation.outputs.BUILD_EXIT_CODE }}"
          echo "VitaSDK Version: $VITASDK_VERSION"
          echo "vita-packages-extra commit: $VITA_PACKAGES_EXTRA_COMMIT"
          
          if [[ "${{ steps.compilation.outputs.BUILD_SUCCESS }}" == "true" ]]; then
            echo "🎉 BUILD SUCCESSFUL - Artifacts ready for upload"
          else
            echo "💾 BUILD FAILED - But compilation cache preserved for next run"
            echo "⚡ Next build will start from cached compilation state"
            echo "🔧 Check build logs above for specific error details"
          fi

      - name: Upload artifact (Success Only)
        if: steps.compilation.outputs.BUILD_SUCCESS == 'true'
        uses: ./.github/actions/upload-artifact
        with:
          name: godot-vita-release-${{ github.sha }}-stable
          path: |
            temp-build/vita_release.velf
            temp-build/godot.vita.opt.32
            temp-build/vita_release/

      - name: Upload Debug Artifacts (Failure Case)
        if: steps.compilation.outputs.BUILD_SUCCESS == 'false'
        uses: ./.github/actions/upload-artifact
        with:
          name: godot-vita-debug-${{ github.sha }}-failed-build
          path: |
            temp-build/
            .scons-cache/
        continue-on-error: true

      - name: Verify Build Success (Final Check)
        run: |
          echo "=== Final Verification ==="
          if [[ "${{ steps.compilation.outputs.BUILD_SUCCESS }}" == "true" ]]; then
            if [[ -f "temp-build/vita_release.velf" ]]; then
              echo "✅ VELF file successfully created"
              file temp-build/vita_release.velf 2>/dev/null || echo "File info unavailable"
              echo "🎯 Build completed successfully!"
              exit 0
            else
              echo "⚠️ Build reported success but VELF file missing"
              exit 1
            fi
          else
            echo "❌ Build failed, but cache preserved for next attempt"
            echo "💡 Next run will continue from cached compilation state"
            echo "🔄 To retry: push another commit or re-run this workflow"
            exit 1
          fi
